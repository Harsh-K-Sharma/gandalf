// ============================================================================
// KERNEL.CPP
// ============================================================================


#include <cmath>
#include <iostream>
#include "Constants.h"
#include "SphKernel.h"
using namespace std;


// ============================================================================
// KERNEL::KERNEL
// ============================================================================
m4::m4()
{
  kernrange = 2.0;
  invkernrange = 0.5;
  kernrangesqd = 4.0;
}



// ============================================================================
// ::~KERNEL
// ============================================================================
m4::~m4()
{
}



// ============================================================================
// M4::SETUP
// ============================================================================
void m4::Setup(int ndim)
{
  if (ndim == 3) kernnorm = invpi;
  return;
}



// ============================================================================
// KERNEL::WO
// ============================================================================
float m4::w0(float s)
{
  if (s < 1.0f)
    return kernnorm*(1.0f - 1.5f*s*s + 0.75f*s*s*s);
  else if (s < 2.0f)
    return 0.25f*kernnorm*powf(2.0f - s,3.0f);
  else
    return 0.0f;
}



// ============================================================================
// KERNEL::W1_M4
// ============================================================================
float m4::w1(float s)
{
  if (s < 1.0f)
    return kernnorm*(-3.0f*s + 2.25f*s*s);
  else if (s < 2.0f)
    return -0.75f*kernnorm*(2.0f - s)*(2.0f - s);
  else
    return 0.0f;
}


// ============================================================================
// KERNEL::W1_M4_TC
// ============================================================================
/*float Kernel::w1_m4_tc(float s)
{
  if (s < 1.0f)
    return kernnorm*(-3.0f*s + 2.25f*s*s);
  else if (s < 2.0f)
    return -0.75f*kernnorm*(2.0f - s)*(2.0f - s);
  else
    return 0.0f;
    }



// ============================================================================
// KERNEL::WO_QUINTIC
// ============================================================================
float Kernel::w0_quintic(float s)
{
  if (s < 1.0f)
    return kernnorm*(66.0f - 60.0f*s*s + 30.0f*powf(s,4) - 10.0f*powf(s,5));
  else if (s < 2.0f)
    return kernnorm*(51.0f+ 75.0f*s - 210.0f*s*s + 150.0f*pow(s,3) -
		     45.0f*powf(s,4) + 5.0f*powf(s,5));
  else if (s < 3.0f)
    return kernnorm*(243.0f - 405.0f*s + 270.0f*s*s - 
		     90.0f*powf(s,3) + 15.0f*powf(s,4) - powf(s,5));
  else
    return 0.0f;
}



// ============================================================================
// KERNEL::W1_QUINTIC
// ============================================================================
float Kernel::w1_quintic(float s) { return 0.0f; }


*/
