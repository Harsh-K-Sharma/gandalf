#==============================================================================
# Makefile
#==============================================================================


ifneq ($(PYTHON),)
ifeq ($(NUMPY),)
NUMPY = $(shell $(PYTHON) -c "import numpy; print numpy.get_include()")
endif
ifeq ($(PYLIB),)
PYLIB = $(shell $(PYTHON) -c "import distutils.sysconfig; print distutils.sysconfig.get_python_inc()")
endif
endif

#PYLIB = /sw/include/python2.7
#NUMPY = /sw/lib/python2.7/site-packages/numpy/core/include

#location of the python files produced by swig
PYFOLDER = ../analysis/swig_generated

GTEST = /Users#/david/astro/code/gtest-1.6.0/include


# Compiler mode flags
# ----------------------------------------------------------------------------
ifeq ($(CC),g++)
ifeq ($(COMPILER_MODE),FAST)
OPT += -O3 -ffast-math -fPIC -fno-exceptions -fno-rtti
else ifeq ($(COMPILER_MODE),DEBUG)
OPT += -g -pg -Wall -fbounds-check #-fprofile-arcs -ftest-coverage
endif
ifeq ($(OPENMP),1)
OPT += -fopenmp -DOPENMP
endif
endif


# Compiler mode flags
# ----------------------------------------------------------------------------
ifeq ($(CC),g++-4)
ifeq ($(COMPILER_MODE),FAST)
OPT += -O3 -ffast-math -fPIC #-fno-exceptions -fno-rtti
else ifeq ($(COMPILER_MODE),DEBUG)
OPT += -g -pg -Wall -fbounds-check
endif
ifeq ($(OPENMP),1)
OPT += -fopenmp -DOPENMP
endif
endif


# Compiler mode flags
# ----------------------------------------------------------------------------
ifeq ($(CC),clang)
ifeq ($(COMPILER_MODE),FAST)
OPT += -O3 -ffast-math -fPIC
else ifeq ($(COMPILER_MODE),DEBUG)
OPT += -g -pg -Wall -fbounds-check
endif
ifeq ($(OPENMP),1)
OPT += -fopenmp -DOPENMP
endif
endif

# Precision options
# ----------------------------------------------------------------------------
ifeq ($(PRECISION),SINGLE)
CFLAGS += -DSINGLE_PRECISION
else ifeq ($(PRECISION),DOUBLE)
CFLAGS += -DDOUBLE_PRECISION
endif


# Debug output flags
# ----------------------------------------------------------------------------
ifeq ($(OUTPUT_LEVEL),1)
CFLAGS += -DDEBUG1
else ifeq ($(OUTPUT_LEVEL),2)
CFLAGS += -DDEBUG1 -DDEBUG2
endif


# Include expensive verification code
# ----------------------------------------------------------------------------
ifeq ($(VERIFY_ALL),1)
CFLAGS += -DVERIFY_ALL
endif



# Object files to be compiled
# ----------------------------------------------------------------------------
#SWIG_HEADERS = Parameters.i SimUnits.i Sph.i SphSnapshot.i SphSimulation.i
SWIG_HEADERS = SphSimulation.i
WRAP_OBJ = SphSimulation_wrap.o
#WRAP_OBJ = Parameters_wrap.o SimUnits_wrap.o Sph_wrap.o SphSnapshot_wrap.o SphSimulation_wrap.o
OBJ = Parameters.o SimUnits.o 
OBJ += Simulation.o SphSimulation.o GodunovSphSimulation.o  #SphSnapshot.o 
#OBJ += SphSimulationIC.o SphSimulationIO.o 
#OBJ += SphSimulationTimesteps.o
#OBJ += SphAnalysis.o
OBJ += M4Kernel.o QuinticKernel.o GaussianKernel.o TabulatedKernel.o
OBJ += Sph.o GradhSph.o SM2012Sph.o GodunovSph.o
OBJ += EnergyPEC.o EnergyGodunovIntegration.o
OBJ += SphIntegration.o SphLeapfrogKDK.o SphGodunovIntegration.o
OBJ += RiemannSolver.o
#OBJ += SphNeighbourSearch.o 
OBJ += BruteForceSearch.o GridSearch.o BinaryTree.o
OBJ += AdiabaticEOS.o IsothermalEOS.o BarotropicEOS.o
#OBJ += SimGhostParticles.o
#OBJ += Render.o
OBJ += Nbody.o NbodyLeapfrogKDK.o NbodyHermite4.o #NbodyHermite4TS.o
OBJ += Sinks.o


TEST_OBJ = #TestScaling.o Parameters.o SimUnits.o Exception.o

.SUFFIXES: .cpp .i .o


%_wrap.cxx: %.i
	swig -c++ -python -outdir $(PYFOLDER) $(CFLAGS) $<

%_wrap.o: %_wrap.cxx
	$(CC) $(OPT) $(CFLAGS) -fexceptions -frtti -c $< -I$(PYLIB) -I$(PYLIB)/config -I$(NUMPY)

%.o: %.cxx
	$(CC) $(OPT) $(CFLAGS) -c $<

%.o: %.cpp
	$(CC) $(OPT) $(CFLAGS) -c $< -I$(GTEST)

UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
SHARED_OPTIONS = -bundle -flat_namespace -undefined suppress
else ifeq ($(UNAME_S),Linux)
SHARED_OPTIONS = -shared
endif
.SECONDARY:

# =============================================================================
all : $(TEST_OBJ) $(WRAP_OBJ) $(OBJ) Exception.o shocktub.so _SphSim.so executable
#uses the interface file rather than directly parsing the fortran file
#if it's needed, interface file can be generated by running
#	f2py -m shocktub -h shocktube.pyf shocktub.f 
	#$(CC) $(CFLAGS) $(OPT) -o ../bin/testing $(TEST_OBJ) /Users/david/astro/code/gtest-1.6.0/make/gtest_main.a
	cp shocktub.so ../analysis
	cp _SphSim.so ../analysis/swig_generated

# =============================================================================

executable : $(OBJ) toymain.o Exception.o
	$(CC) $(CFLAGS) $(OPT) -o toymain $(OBJ) Exception.o toymain.o
	cp toymain ../bin/toymain

_SphSim.so : $(WRAP_OBJ) $(OBJ) Exception.o Render.o SphSnapshot.o
	$(CC) $(CFLAGS) $(OPT) $(SHARED_OPTIONS) $(WRAP_OBJ) $(OBJ) Exception.o Render.o SphSnapshot.o -o _SphSim.so

shocktub.so : shocktub.f shocktub.pyf
	$(F2PY) --quiet -c shocktub.f shocktub.pyf

Exception.o : Exception.cpp
	$(CC) $(OPT) $(CFLAGS) -fexceptions -c $<

SphSimulation.o : SphSimulationIO.cpp SphSimulationTimesteps.cpp SphSimulationIC.cpp SphAnalysis.cpp SimGhostParticles.cpp


force: ;

clean ::
	\rm -f *_wrap.cxx
	\rm -f *.o
	\rm -f *.so
	\rm -f ../analysis/*.so
	\rm -f ../analysis/swig_generated/*.so
	\rm -f *.pyc
	\rm -f ../analysis/swig_generated/SphSim.py
